1. instanceof 연산자 설명하세요.

	객체의 인스턴스가 어떤 타입인지 알수 있다.

	Employee emp = new SalesMan();

	// instanceof 연산자를 써서 확인할 때에는 제일 나중에 상속받은 자식 클래스부터 선언하는게 좋다.
	if(emp instanceof SalesMan)  {} 	// true
	else if(emp instanceof Regular) {}	
	else if(emp instanceof Employee) {}	


2. 매개변수 다형성 설명하세요.
	method(new Regular());
	method(new SalesMan());
	method(new Temp());

	void method(Employee emp ) {
		
	}

3. 싱글턴 패턴 설명하세요.

	싱글턴 패턴이란 객체를 생성하는 것을 한개로 제한하는 것이다.

	class BoardDao {
		private static BoardDao boardDao;		

		pirvate BoardDao() {}

		public static BoardDao getInstance() {
			if(boardDao == null) boardDao = new BoardDao();

			return boardDao;
		}
	}

	main 함수에서 객체를 몇개 생성하고 hashCode()값을 찍어보면 같은 값이 나온다.

4. 예외 및 예외 처리 설명하세요.

1. 컴파일 오류 - 코드 작성시 오류 남

2. 런타임 오류 - 실행 중 오류

	1) 에러 - 심각한 오류 // 메모리 부족, 스택오버플로우 등

	2) 예외 - 수습할 수 있고 예외 처리를 할 수 있는 오류 // IOException, InterruptedException 등

3. 논리적 오류 - 생각했는 거와는 다르게 값이 나옴. 오류 찾기가 힘듬

	[예외 처리]

	try {
		// 예외가 발생할 수 있는 코드를 작성
		// 예외가 발생하면 JVM의 예외처리기를 통해 해당 예외 객체가 생성됨
		// 예외가 발생하면 밑에 있는 코딩들은 실행안함
	   // 다중 catch문
	} catch() {			// 발생한 예외 객체는 instanceof를 하며 true라면 해당 catch문을 실행
		
	} catch(IOException | InterruptedException e) {	// 멀티 catch문

	} catch(Exception e) {		// Exception은 예외클래스들의 조상이기 때문에 마지막 catch문에 
					   선언하는 것이 좋음

	} finally {
		// 예외 유무 상관없이 실행됨
	}

	[예외 되던지기]
	void method() throws Exception {		// 발생한 예외를 호출한 메서드에게 떠맡김 
		throw new Exception("에러 메시지");	// 고의로 예외 발생
	}



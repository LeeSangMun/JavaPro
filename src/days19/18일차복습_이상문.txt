1.인터페이스에 대해서 상세히 설명하세요.

	1. 일종의 추상클래스
	2. extends로 인터페이스끼리 상속이 가능하고 다중 상속이 가능하다.
	3. 상수와 추상메서드를 가질 수 있다.
	4. 상수는 자동으로 public static final이 붙는다.
	5. 추상메서드는 public abstract가 붙는다.
	6. default메서드와 static 메서드를 가질 수 있다.
	7. 클래스로 구현할 때는 implements 를 쓴다.
	
	
	인터페이스 장점
	1. 개발 시간을 단축 시킬 수 있다.
	2. 
	3. 관련 없는 클래스들을 관련 있게 만들 수 있다.
	4. 독립적인 프로그래밍이 가능하다.


2. 객체로 부터 [Class 객체]를 얻어오는 3가지 방법에 대해서 설명하세요 .

	1. Object 클래스의 getClass()
	Card card = new Card();
	Class cls = card.getClass();

	2. Class 클래스이 static 메서드인 forName()
	Class cls = Class.forName("days18.Card");

	3. 객체 자신의 .class
	Class cls = Card.class;

 3. String 클래스의 메서드 설명 - 기능, 매개변수, 리턴값(리턴자료형)
  ㄱ. length()  
	기능	- 문자열의 길이를 얻어옴
	매개변수	- 없음
	리턴값	- int

  ㄴ. charAt()  
	기능	- 문자열의 요소를 얻어올 수 있음
	매개변수	- int index
	리턴값	- char

  ㄷ. compareTo() / compareToIgnoreCase()

	기능	- 문자열 끼리 비교함 / 대소문자 구분없이 비교함 
		  호출한 객체의 문자열이 앞이면 음수 같으면 0 뒤면 양수
	매개변수	- String 문자열
	리턴값	- int

  ㄹ. equals() / equalsIgnoreCase()  

	기능	- 문자열이 같은지 확인 / 대소문자 구분없이 같은지 확인
	매개변수	- String 문자열
	리턴값	- boolean

  ㅁ. concat()   

	기능	- 문자열에 문자열을 붙임
	매개변수	- String 문자열
	리턴값	- String

  ㅅ. startsWith()  

	기능	- 매개변수로 들어오는 문자열로 시작하는지 확인
	매개변수	- String
	리턴값	- boolean

  ㅇ. endWith()     

	기능	- 매개변수로 들어오는 문자열로 끝나는지 확인
	매개변수	- String
	리턴값	- boolean

  ㅈ. indexOf()      

	기능	- 해당 문자 또는 문자열이 앞에서부터 어느 인덱스부터 있는지 반환. 없으면 -1 반환
	매개변수	- char 또는 String
	리턴값	- int

      lastIndexOf()  

	기능	- 해당 문자 또는 문자열이 뒤에서부터 어느 인덱스부터 있는지 반환. 없으면 -1 반환
	매개변수	- char 또는 String
	리턴값	- int

  ㅊ. replace()     

	기능	- 문자 또는 문자열로 교체하는 메서드
	매개변수	- (char, char)  또는 (String, String)
	리턴값	- String

      replaceAll( regex )

	기능	- replace()와 다르게 정규식을 사용해 해당문자열을 바꿀 수 있음
	매개변수	- String regex, String 바꿀 문자열
	리턴값	- String

      replaceFirst(regex)

	기능	- 바꿀 문자열 중 처음에 해당하는 문자열만 바꾸는 메서드
	매개변수	- String regex, String 바꿀 문자열
	리턴값	- String

  ㅋ. split()

	기능	- 문자열을 구분자로 잘라서 String 배열을 리턴한다.
	매개변수	- String 구분자, String 
	리턴값	- String[]

  ㅌ. toUpperCase() / toLowerCase()

	기능	- 문자열을 대문자로 변경 / 문자열을 소문자로 변경
	매개변수	- 없음
	리턴값	- String

  ㅍ. trim()      

	기능	- 양쪽 사이의 공백을 없애줌
	매개변수	- 없음
	리턴값	- String
     
  ㅎ. valueOf()      

	기능	- static 메서드. 기본형 8가지가 들어 갈 수 잇는 메서드가 오버로딩 되어있음
		  해당 매개변수를 문자열로 바꿔줌
	매개변수	- 기본형 8가지
	리턴값	- String

  ㄱ. join()

	기능	- static 메서드. 구분자와 String배열을 합쳐서 반환함
	매개변수	- String 구분자, String[]
	리턴값	- String

  ㄴ. format()  

	기능	- static 메서드. printf()처럼 내가 원하는 형식을 문자열로 반환함
	매개변수	- String , Object...
	리턴값	- String

  ㄷ. matches()

	기능	- 매개변수의 정규식이 메치되는지 확인
	매개변수	- String regex
	리턴값	- boolean

  ㄹ. substring() 

	기능	- 문자열을 추출한다.
	매개변수	- int start, [ int end ]
	리턴값	- String
  :
  
4. "1. Java 팀 구성.txt"  파일을 읽어서 본인의 팀원들만의 이름을 teamMember 배열에 저장한 후 팀장명을 제외한 나머지 팀원들의 이름을  내림차순으로 정렬해서 아래와 같이 출력하는 코딩을 하세요.
[실행결과]  예 : [ 2조 ]
<ul>
	<li class="leader">임경재</li>
	<li>이지현</li>
	<li>유희진</li>
	<li>박민석</li>
	<li>김호영</li>
	<li>김정주</li>
	<li>고경림</li>
</ul>

	public static void main(String[] args) {
		String dir = System.getProperty("user.dir");
		String source = "\\src\\days19\\1. Java 팀 구성.txt";
		
		String fileName = dir + source;
		
		String[] teamMember = null;
		
		try(FileReader fr = new FileReader(fileName);
				BufferedReader br = new BufferedReader(fr)) {
			String line;
			while((line = br.readLine()) != null) {
				if(line.equals("3조")) {
					line = br.readLine();
					teamMember = line.split(",");
					break;
				}
			}
			
//			System.out.println(Arrays.toString(teamMember));
			Arrays.sort(teamMember, 1, teamMember.length, (s1, s2) -> s2.compareTo(s1));
//			System.out.println(Arrays.toString(teamMember));
			
			StringBuffer sb = new StringBuffer();
			sb.append("<ul>\n");
			for (int i = 0; i < teamMember.length; i++) {
				if(teamMember[i].indexOf("(팀장)") != -1) {
					teamMember[i] = teamMember[i].replace("(팀장)", "");
					sb.append("\t<li class=\"leander\">" + teamMember[i] + "</li>\n");
				} else {
					sb.append("\t<li>" + teamMember[i] + "</li>\n");
				}
			} // for
			sb.append("</ul>");
			
			System.out.println(sb.toString());
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}

5. https://school.programmers.co.kr/learn/courses/30/lessons/120913
위의 주소 문제 풀기.